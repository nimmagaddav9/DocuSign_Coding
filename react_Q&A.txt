Q1: Hooks?

Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
Hooks are backwards-compatible. 

1. useState
2. useEffect
3. useContext
4. useReducer
5. useMemo
6. useCallback
7. useRef

useState: Manages state in functional components.  
useEffect: Manages side effects in functional components. 
useContext: Consumes context in functional components.  manage global state.
useReducer: Manages state with a reducer function. For more  complex state management
useRef: Accesses DOM elements or stores mutable values.  
useCallback: performance improvement usecase  
useMemo: performance improvement usecase


useState Hook ? example?
Manage component state.

import React, {useState} from 'react';

function Counter() {
    const [count, setCount] = useState(0);

    return(
        <div>
        <p> you clicked {count} times </p>
        <button onClick = {()=> setCount(count + 1)}>Click Me</button>
        </div>
    )
}

export default Counter;

// output
// you clicked 7 times

button --> Click Me

---------------------------------------------------------------------------
useEffect hook What? manage side effects?
useEffect is a hook that manages side effects like data fetching, subscriptions, or manually changing the DOM.

import React, {useEffect, useState} from "react";

function DataFetcher(){
    useEffect(()=>{}, []); // empty array means this effect runs only once.
    useEffect(()=>{}, [depedency]); // runs if depedency value changes
    useEffect(()=>{
        return () => {};
    }, []); // cleanup method

    return <div></div>;
}

export default DataFetcher;

=======================================================================================

how to implement data fetching in react js?

import React, {useEffect, useState} from "react";

function DataFetchingExample(){
    const [data, setData] = useState(null);

    async function fetchData(){
        const response = await fetch("api-endpoint");
        const result = await response.json();

        if (result) setData(result);
    }

    useEffect(()=>{
        fetchData();
    }, []); // empty array means this effects runs only once
    return <div>{data ? data.title : "Loading..."}</div>;
}

export default DataFetchingExample;

===============================================

How to manage loading state?

import React, {useEffect, useState} from "react";

function DataFetchingExample(){
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(false);

    async function fetchData(){
        setLoading(true)
        const response = await fetch("api-endpoint");
        const result = await response.json();

        if (result) {
            setData(result);
            setLoading(false);
    }
    }
    if(loading) return <h1> Loading data! please wait</h1>

    useEffect(()=>{
        fetchData();
    }, []); // empty array means this effects runs only once

    return <div>{data ? data.title : "Loading..."}</div>;
}

export default DataFetchingExample;

========================================================================
What is the useReducer hook, and when should you use it?

alternative of useState.
The useReducer hook is used for state management in React.
It is suitable for handling more complex state logic compared to useState.

import React, { useReducer } from 'react';

function App(){
const initialState = { count : 0 };

function reducer(state, action) {
    switch(action.type) {
        case 'increment':
        return {count: state.count + 1};
        case 'decrement':
        return { count : state.count - 1 };
        default:
        throw new Error();
    }
}

function Counter() {
    const [state, dispatch] = useReducer(reducer, initialState);
    return(
        <div>
        <p>Count: {state.count}</p>
        <button onClick={()=> dispatch({type:'increment'})}>+</button>
        <button onClick={()=> dispatch({type: 'decrement'})}>-</button>
        </div>
    );
}
}

export default App;


================================================================


High order components what ? Why? When?

A Higher-Order Component (HOC) is a function that takes a  component and returns a new component with added functionality. 
HOCs are used for reusing component logic and enhancing components with additional behavior.

Machine coding round?

import React, { useState } from 'react';

const withLoading = (Component) => {
    return class withLoading extends React.Component {
        state = { isLoading: true };

        componentDidMount() {
            setTimeout(()=>{
                this.setState({isLoading: false});
            }, 1000);
        }

        render() {
            if(this.state.isLoading){
                return <p>Loading....</p>
            }
            return <Component {...this.props} />
        }
    };
};

const MyComponent = () =>{
    return <h1>Component is Loaded!</h1>
};

export default withLoading(MyComponent);
=======================================================

Lifecycle method of components, class component?

React component lifecycle has three categories – Mounting, Updating and Unmounting.
Mounting – Birth of your component
Update – Growth of your component
Unmount – Death of your component

React Component LifeCycle Hooks

        1. constructor
        2. componentWillMount()
        3. render()
        4. componentDidMount()
        5. componentWillReceiveProps()
        6. shouldComponentUpdate()

        // component kill methods

        7. componentWillUpdate()
        8. componentDidUpdate()
        9. componentWillUnmount()

# Constructor()

        constructor will execute at booting time of component --constructor will execute only once
        Define state in constructor

# componentWillMount()

        componentWillMount() will execute after constructor
        componentWillMount() will execute only once
        in general we will do the initial modifications in state
        in general we will set global parameters like width, height

# render()

        after componentWillMount() automatically render() function will execute
        render() is mandatory lifecycle hook(main lifecycle hook)
        in general, we will place presentation logic in render()
        when ever change detected in state or props automatically this lifecycle hooks will execute

# componentDidMount()

        after render function immediately componentDidMount() life cycle hook will execute
        in general we will make asynchronous calls in ComponentWillMount()
        this is recommended state to change the state of component

# componentWillReceiveProps()

        when component will receive props from redux

# shouldComponentUpdate()

        if we want to update the state return "true" else "false"

# UNSAFE_componentWillUpdate()

        death method --> perform cleanup operations

# componentDidUpdate()

        if we integrate any third party UI elements
        plugin logic will write here

# componentWillUnmount()

        Before killing the component componentWillUnmount is executed.
        death method --> perform cleanup operations
================================================================================

#state management 

State/props
Prop drilling, write code example?
Context


What is prop drilling and how to avoid it?
prop drilling occurs when you pass data through many layers of components.
It can be avoided using the context API or state management libraries like redux.

function CompA(){
    return <CompB title="prop drilling" />
}

function compB({title}){
    return <CompC title={title} />
}

function CompC({title}){
    return <CompD title={title} />
}

function CompD({title}){
    return <h3>{title}</h3>
}
=====================================================
Context API? why is it used?

Context API in React provides a way to share values (like data or functions) between components without having to pass props through every level of the component tree.
It is used to avoid prop drilling.

Context --> Global State


 A              B      C    D  (using in all components)



import React, { createContext } from 'react';


// create a Context
const MyContext = createContext();

// Provider component
export default function MyProvider({children}){
    const value = "Hello, world!";
    return (
        <MyContext.Provider value={value}>
          {children}
        </MyContext.Provider>
    );
}


// wrap the context

export default function App(){
    return <MyProvider><div>Child Components</div></MyProvider>
}
==========================================================================

How do you consume context using the useContext hook?
The useContext hook allows functional components to access context values directly.

import React, { useContext } from 'react';
import {MyContext} from './MyProvider';

function MyComponent(){
    const value = useContext(MyContext);
    return <div>{value}</div>;
}

export default MyComponent;

===============================================================================

How can you update context values?

import React, {createContext, useState} from 'react';

const MyContext = createContext();

function MyProvider({children}){
    const [value, setValue] = useState("hello, world!");
    return (
        <MyContext.Provider value={{value, setValue}}>
        {children}
        </MyContext.Provider>
    );
}

function MyComponent() {
    const {value, setValue} = useContext(MyContext);
    return (
        <div>
        <p>{value}</p>
        <button onClick= {()=> setValue("New Value")}>Update</button>
        </div>
    );
}

========================================================================
What are the advantages of using the Context API over prop drilling?
Context API reduces the need for prop drilling, making the code more readable  and maintainable. 
It allows for easy sharing of state and functions across the  component tree without passing props through every level.


// with Context API
<MyProvider>
    <GrandChild />
</MyProvider>
==============================================================
Redux/ zustand
How redux works? Why? When? If application is needed?


Redux toolkit, rtk


Custom hooks
When?

Clean, readable, reusable

Code

Example?


Lazy loading v.imp highly asked
 Code splitting 
Chunking 
Suspense

Performance is important

Virtual DOM? Why?  
Reconciliation 
React fiber
Diffing algorithm 
Render works?



SSR vs CSR
Server side rendering vs client side rendering 

Difference? Benefits?

SEO 
Performance 



Routing(RBAC) role base access control

	- React router
	- How do you manage protected routes?
	- Query params
	- Dynamic routing
	- X.com/username /profile how to handle?

=====================================================================================================================

# Testing Methodologies
    1. Unit Testing: This involves testing individual components or functions to ensure they work as expected. 
                    Jest is commonly used for unit testing in React applications due to its simplicity and built-in features like mocking and assertions.

    2. Integration Testing: This type of testing focuses on the interaction between different components or modules. 
    It often involves testing how components interact with state management libraries like Redux. 
    Tools such as Redux Mock Store can be used to simulate different scenarios and test the application's behavior.

    3. End-to-End Testing: This involves testing the entire application from start to finish, simulating user interactions to verify that the application behaves correctly from a user's perspective. 
    Cypress and Selenium are popular tools for performing end-to-end tests.

# Tools and Libraries
    1. Jest: A widely used JavaScript testing framework that integrates well with React Testing Library. 
        It provides features like mocking, assertions, and code coverage reporting, making it suitable for both unit and integration tests.
    2. React Testing Library: A library designed to test React components by focusing on user interactions rather than implementation details. 
        It provides methods such as getByText, getByLabelText, and getByTestId to query components and simulate user actions using fireEvent.
    3. Cypress: An end-to-end testing framework that allows developers to write tests that mimic real user behavior, 
        providing a comprehensive view of how an application performs in a real-world scenario


    Q1. How do you test a React component using Jest?
        First, create a test file and import the component to be tested. 
        Use the render method from React Testing Library to render the component, then use Jest's expect function to make assertions about its behavior.
    Q2. What strategies do you use for testing React components?
        Write unit tests for individual components, integration tests for component interactions, and snapshot tests to capture the component's output. 
        Focus on writing tests that reflect real user interactions.
    Q3. How do you perform end-to-end testing in React?
        Use tools like Cypress or Selenium to simulate user behavior across the entire application, verifying that it works correctly from start to finish.

React testing


Async task useEffect in depth.
Api calls
Events
Promises
Fetch 
Axiousfetch?


============================================================================================================================
Reusability
Modularity
Testability
Readability 

# key software engineering concepts

Reusability
    Reusability refers to the ability to use components across different parts of an application or even in different projects without modification. 
    In React.js, this is achieved by creating components that are generic and configurable through props. 
    By designing components to be reusable, developers can reduce code duplication and improve maintainability. 
    For example, a button component can be reused throughout an application by passing different props for text and styles.

Modularity
    Modularity involves breaking down an application into smaller, self-contained units or modules. 
    In React.js, this is naturally achieved through components. 
    Each component encapsulates its own logic and UI, making it easier to manage and understand. 
    This modular approach allows developers to work on individual components independently, facilitating parallel development and simplifying debugging.

Testability
    Testability refers to how easily software can be tested. 
    In React.js, testability is enhanced by the component-based architecture, which allows developers to test individual components in isolation. 
    Tools like Jest and React Testing Library are commonly used to write unit tests for components, ensuring they behave as expected under various conditions. 
    Testable components should have clear inputs (props) and outputs (rendered UI), making it easier to verify their functionality.

Readability
    Readability is the ease with which code can be read and understood by humans. 
    In React.js, readability is improved by using clear and descriptive names for components, props, and functions. 
    Additionally, adhering to best practices such as keeping components small and focused on a single responsibility enhances readability. 
    Using JSX syntax also contributes to readability by allowing developers to write HTML-like code within JavaScript.

================================================================================================

Performance *******system design round
Rendering of components faster
Lazy loading
Asset optimization , js code, image
Bundler
CDN
Writing optimized code.

    To improve the performance of a React.js application, you can implement several optimization techniques:
    1. Component Optimization
        Use React.memo and PureComponent
        Implement React.memo for functional components and PureComponent for class components to prevent unnecessary re-renders. 
        These tools perform shallow comparisons of props and state, rendering only when there are changes.

    2. Optimize Lists with Keys
        Always provide unique keys when rendering lists of components. 
        This helps React identify which items have changed, been added, or removed, reducing unnecessary re-renders.

    3. Code Optimization
        Implement Code Splitting
            Break down large bundles into smaller chunks using code splitting techniques. 
            This reduces initial load times and improves overall performance, especially for larger applications.
    4. Lazy Loading
        Use React.lazy and Suspense to lazily load components that are not immediately needed. 
        This can help reduce the initial bundle size and improve load times.

    5. State Management
        Optimize Redux Usage
        If you're using Redux, consider using the RESELECT library for rendering operations in higher-order components. 
        Additionally, Immutable.js can be used to improve performance in Redux-based applications.

    6. Rendering Optimization
        Avoid Inline Function Definitions
            Prevent creating new function instances inside render methods, as this can lead to unnecessary re-renders. 
            Instead, use useCallback and useMemo hooks to memoize functions and values.
    7. Implement Windowing for Long Lists
        For applications displaying long lists, use list virtualization or windowing techniques. 
        This approach renders only the visible items, significantly improving performance.
    Additional Techniques
        Lazy Load Images
            Implement lazy loading for images to prevent rendering all images at once, which can slow down the initial page load.
        Use Production Build
            Ensure you're using the production build of React, which includes various optimizations and is significantly faster than the development build.
        Implement Web Workers
            For computationally intensive tasks, consider using Web Workers to offload processing to a background thread, keeping the main thread free for UI updates.

=============================================================================================================================================================
#styling
	- Tailwind 
	- Style x - facebook comeup with new way
	- Bootstrap
	- Material ui
	- Anti Ui
	- Css / scss / inline
	- Pros vs cons
    
    What is Tailwind CSS and how does it differ from other CSS frameworks?
        Tailwind CSS is a utility-first CSS framework that allows developers to style their HTML elements directly with pre-built utility classes, 
        offering more granular control compared to traditional frameworks with predefined components

        There are several ways to style components in React:
            1. CSS Stylesheets: Import a separate CSS file and use className to apply styles12.
            2. Inline Styling: Use the style attribute with a JavaScript object containing camelCased CSS properties. example: <div style={{color: 'blue', fontSize: '14px'}}>Styled div</div>
            3. CSS Modules: Use CSS files with locally scoped class names.
            4. Styled-components: A popular CSS-in-JS library that allows writing CSS code within JavaScript.
                import styled from 'styled-components'

                const Button = styled.button`
                    width: 100px;
                    cursor: pointer;
                    text-decoration: none;
                    `
            5. CSS-in-JS libraries: Other libraries like Emotion or JSS that offer similar functionality to styled-components.


    Pros of Styling in React.js
        1. Component-Based Architecture:
            Modularity: Styles can be scoped to components, reducing the risk of global style conflicts.
            Reusability: Styled components or CSS modules allow for reusable styles across different components.
        2. CSS-in-JS Solutions:
            Dynamic Styling: Libraries like Styled Components and Emotion allow for dynamic styling based on props or state.
            Scoped Styles: These libraries provide scoped styles, preventing clashes with other styles in the application.
        3. CSS Modules:
            Local Scope: CSS modules automatically scope styles locally by default, which helps in avoiding naming conflicts.
            Maintainability: They make it easier to maintain and understand styles as they are tied closely to their respective components.
        4. Performance:
            Critical CSS: Tools can extract critical CSS for server-side rendering, improving initial load performance.

    Cons of Styling in React.js
        1. Complexity with CSS-in-JS:
            Learning Curve: New developers might find CSS-in-JS libraries complex compared to traditional CSS.
            Performance Overhead: Dynamic styles can add runtime overhead if not optimized properly.
        2. Tooling and Build Configuration:
            Setup Complexity: Some styling solutions require additional tooling and configuration, which can complicate the build process.
            Vendor Lock-In: Using specific libraries might lock you into their ecosystem, making future migrations difficult.
        3. Global Styles Management:
            Global Conflicts: Managing global styles can be challenging, especially in large applications where multiple teams contribute.
            Theming Challenges: Implementing consistent theming across the application might require additional setup and maintenance.
        4. SSR Challenges with CSS-in-JS:
            Server-Side Rendering (SSR): Ensuring that styles are correctly rendered on the server can be tricky with some CSS-in-JS solutions.


Accessibility:
    	Ensure your application is accessible to users with disabilities by following accessibility guidelines like WCAG(Web Content Accessibility Guidelines).
        Use tools like NVDA or speech viewer to test and improve accessibility.
        Followed Web Content Accessibility Guidelines(WCAG 2.0) for all portal apps in United, Visa and made sure guidelines were set up by W3C around accessibility.
	    We can use Font Size increase - the font sizes of the text should be given in rem units so that if the parent font size increases it will scale all its subsequent descendants.
	    Add Images with Alt Text -  Giving proper label images to all tags. 
	    Add Keyboard Navigation.
	    Use a Descriptive URL.
        Add aria-labels

Security 
    Best Practices for React.js Security
        1. Avoid Malicious URLs and Script Injections
            Validate URLs to ensure they start with http: or https: to prevent script injections via javascript: protocol URLs.
            Use allowlist/blocklist strategies to manage safe and unsafe URLs.
        2. Sanitize and Render HTML Safely
            Always sanitize HTML to prevent cross-site scripting (XSS) attacks. Use libraries like DOMPurify for sanitization.
            Avoid using dangerouslySetInnerHTML unless absolutely necessary, and ensure any HTML passed through it is sanitized.
        3. Secure Authentication and Authorization
            Implement secure authentication mechanisms such as OAuth or JWT tokens for session management.
            Use multifactor authentication (MFA) to add an extra layer of security.
        4. Use Secure Data Binding
            Utilize React's default data binding with curly braces ({}) to automatically escape values and protect against XSS attacks.
        5. Avoid Direct DOM Access
            Refrain from directly manipulating the DOM using methods like findDOMNode. Instead, use React's state management and refs.
        6. Keep Dependencies Updated
            Regularly update React and its dependencies to the latest versions to avoid known vulnerabilities.
            Use tools like Snyk CLI to check for vulnerabilities in dependencies.
        7. Implement Server-Side Security Measures
            Ensure server-side rendering (SSR) is secure by validating all incoming data and using secure headers.
            Protect against SQL injection by validating API calls and using ORM libraries.
        8. Use Linter Configurations
            Set up ESLint with security configurations to automatically detect potential security flaws in your code.
        9. Secure API Communications
            Validate all API functions against their schemas and use SSL/TLS encryption for secure data transmission.
        10. Prevent JSON Injection Attacks
            Avoid serializing sensitive data with JSON.stringify() without proper sanitization. Use libraries like serialize-javascript to escape JSON data safely


Performance 
Testing 

	
	
	












	








